name: üóÑÔ∏è Database Migration Workflow

on:
  push:
    branches: [ main ]
    paths: [ "sql/**" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'üåç Selecione o Ambiente'
        required: true
        default: 'dev'
        type: choice
        options: [dev, hml, prod]
      command:
        description: '‚ö° Comando Flyway'
        required: true
        default: 'migrate'
        type: choice
        options: [info, validate, migrate, repair]

env:
  FLYWAY_VERSION: 10.18.2
  FLYWAY_SCHEMAS: scheduler
  FLYWAY_DEFAULT_SCHEMA: scheduler

jobs:
  validate:
    name: üîç Valida√ß√£o de Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: üîç Verificar Estrutura
        run: |
          if [ ! -d "sql" ]; then
            echo "::error::Diret√≥rio sql/ n√£o encontrado"
            exit 1
          fi

          for dir in ddl dml repeatable; do
            if [ ! -d "sql/$dir" ]; then
              echo "::warning::Diret√≥rio sql/$dir n√£o encontrado"
            fi
          done

      - name: üìù Validar Sintaxe SQL
        run: |
          echo "::group::Valida√ß√£o de Scripts SQL"
          find sql -type f -name "*.sql" -print0 | while IFS= read -r -d '' file; do
            echo "üîé Analisando $file"
            # Aqui iremos apenas verificar se o arquivo existe e √© leg√≠vel
            if [ ! -r "$file" ]; then
              echo "::error file=$file::Arquivo n√£o pode ser lido"
              exit 1
            fi
          done
          echo "::endgroup::"

      - name: üîç Validar Nomenclatura
        run: |
          echo "::group::Valida√ß√£o de Nomenclatura"

          error_count=0
          error_files=""

          # Validar scripts versionados
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              basename=$(basename "$file")
              echo "üîé Verificando: $file"

              if [[ ! $basename =~ ^V[0-9]{14}__ ]]; then
                echo "::error file=$file::‚ùå $basename - N√£o segue o padr√£o V{YYYYMMDDHHMMSS}__"
                error_count=$((error_count + 1))
                error_files="$error_files\n- $file"
              else
                echo "‚úÖ $basename - OK"
              fi
            fi
          done < <(find sql/ddl sql/dml -type f -name "*.sql" 2>/dev/null)

          # Validar scripts repet√≠veis
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              basename=$(basename "$file")
              echo "üîé Verificando: $file"

              if [[ ! $basename =~ ^R__ ]]; then
                echo "::error file=$file::‚ùå $basename - N√£o segue o padr√£o R__"
                error_count=$((error_count + 1))
                error_files="$error_files\n- $file"
              else
                echo "‚úÖ $basename - OK"
              fi
            fi
          done < <(find sql/repeatable -type f -name "*.sql" 2>/dev/null)

          if [ $error_count -gt 0 ]; then
            echo "‚ùå Encontrados $error_count arquivo(s) com erro de nomenclatura:"
            echo -e "$error_files"
            exit 1
          fi

          echo "‚úÖ Todos os arquivos seguem o padr√£o de nomenclatura"
          echo "::endgroup::"

  approval:
    name: ‚úã Aprova√ß√£o Manual
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    if: inputs.environment != 'dev'
    steps:
      - run: echo "‚úÖ Migra√ß√£o aprovada para ${{ inputs.environment }}"

  migrate:
    name: üöÄ Execu√ß√£o da Migra√ß√£o
    needs: [validate, approval]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}

    concurrency:
      group: flyway-${{ inputs.environment || 'dev' }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      - name: Configurar Vari√°veis
        run: |
          echo "FLYWAY_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "FLYWAY_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "FLYWAY_PASSWORD=${{ secrets.DB_PASS }}" >> $GITHUB_ENV

      - name: üìä Info Pr√©-Migra√ß√£o
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/sql:/flyway/sql" \
            -e FLYWAY_URL -e FLYWAY_USER -e FLYWAY_PASSWORD \
            -e FLYWAY_SCHEMAS -e FLYWAY_DEFAULT_SCHEMA \
            flyway/flyway:${{ env.FLYWAY_VERSION }} \
            info

      - name: ‚ö° Executar Flyway
        id: migrate
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/sql:/flyway/sql" \
            -e FLYWAY_URL -e FLYWAY_USER -e FLYWAY_PASSWORD \
            -e FLYWAY_SCHEMAS -e FLYWAY_DEFAULT_SCHEMA \
            flyway/flyway:${{ env.FLYWAY_VERSION }} \
            ${{ inputs.command || 'migrate' }}

      - name: üìà Info P√≥s-Migra√ß√£o
        if: always()
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/sql:/flyway/sql" \
            -e FLYWAY_URL -e FLYWAY_USER -e FLYWAY_PASSWORD \
            -e FLYWAY_SCHEMAS -e FLYWAY_DEFAULT_SCHEMA \
            flyway/flyway:${{ env.FLYWAY_VERSION }} \
            info

      - name: üì£ Notificar Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const notify = require('./.github/scripts/notify.js');
            await notify({
              github,
              context,
              status: "${{ job.status }}",
              environment: "${{ inputs.environment || 'dev' }}",
              command: "${{ inputs.command || 'migrate' }}"
            });
